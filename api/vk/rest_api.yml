openapi: 3.0.0
info:
  title: VKontakte Social Network API
  version: 1.0.0
  description: API for VKontakte Social Network
servers:
  - url: https://api.vk.com
paths:
  /users/{user_id}/friends:
    post:
      summary: Add friend
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: user_id
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: "#/components/responses/SuccessfullyResponse"
        '404':
          description: Not found
    delete:
      summary: Remove friend
      security:
        - BearerAuth: [ ]
      parameters:
        - in: path
          name: user_id
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: "#/components/responses/SuccessfullyResponse"
        '404':
          description: Not found
    get:
      summary: Get friends list
      parameters:
        - in: path
          name: user_id
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShortUserProfilesList'
            text/plain:
              schema:
                type: string

  /users/{user_id}:
    get:
      summary: Get user profile
      parameters:
        - in: path
          name: user_id
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
            text/plain:
              schema:
                type: string
        '404':
          description: Not found
  /posts:
    post:
      summary: Create new post
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '200':
          $ref: "#/components/responses/SuccessfullyResponse"
        '400':
          description: Bad request
  /media:
    post:
      summary: Upload media file
      security:
        - BearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MediaUpload'
      responses:
        '200':
          $ref: "#/components/responses/MediaUploadResponse"
        '400':
          description: Bad request
  /feed/home:
    get:
      summary: Get home feed
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          $ref: "#/components/responses/FeedListResponse"
        '400':
          description: Bad request
  /users/{user_id}/feed:
    get:
      summary: Get user feed
      parameters:
        - in: path
          name: user_id
          description: User ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: "#/components/responses/FeedListResponse"
        '404':
          description: Not found
  /dialogs:
    get:
      summary: Get dialogs list
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          $ref: "#/components/responses/DialogsResponse"
  /dialogs/{dialog_id}/messages:
    get:
      summary: Get dialog messages by id
      parameters:
        - in: path
          name: dialog_id
          description: Dialog ID
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          $ref: "#/components/responses/MessagesResponse"
        '400':
          description: Bad request
    post:
      summary: Send message to dialog
      parameters:
        - in: path
          name: dialog_id
          description: Dialog ID
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessage'
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          $ref: "#/components/responses/SuccessfullyResponse"
        '400':
          description: Bad request
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    MessagesResponse:
      description: list of messages
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Message'
    DialogsResponse:
      description: List of dialogs
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ShortDialog'
    SuccessfullyResponse:
      description: Basic ok response
      content:
        application/json:
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
    FeedListResponse:
      description: Feed response list
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Post'
    MediaUploadResponse:
      description: Media file uploaded successfully
      content:
        application/json:
          schema:
            type: object
            required:
              - success
              - message
            properties:
              success:
                type: boolean
                description: Flag indicating if upload was successful
                example: true
              mediaUrl:
                type: string
                example: "http://cdn.com?imageId=2324244?type=video"
              message:
                type: string
                description: Message indicating the status of the upload process.
                example: "Media file successfully uploaded."
  schemas:
    ShortUserProfile:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        fullName:
          type: string
          example: Брежнев Алексей
        photoUrl:
          type: string
          example: http://cdn.com?imageId=2324243
        active:
          type: boolean
          example: true
    ShortUserProfilesList:
      type: object
      properties:
        count:
          type: integer
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/ShortUserProfile'
    UserProfile:
      type: object
      required:
        - id
        - firstName
        - lastName
        - photoUrl
        - info
        - friends
        - posts
        - video
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        photoUrl:
          type: string
        lastSeen:
          type: string
        info:
          type: object
          required:
            - email
            - gender
            - friendsCount
            - subscribersCount
            - subscriptionsCount
          properties:
            email:
              type: string
            dateOfBirth:
              type: string
              format: date
            gender:
              type: string
              enum:
                - male
                - female
                - other
            phoneNumber:
              type: string
            country:
              type: string
            city:
              type: string
            language:
              type: string
            friendsCount:
              type: integer
            subscribersCount:
              type: integer
            subscriptionCount:
              type: integer
            familyStatus:
              type: object
              required:
                - state
              properties:
                state:
                  type: string
                  enum:
                    - married
                    - single
                    - dating
                partner:
                  type: object
                  properties:
                    id:
                      type: integer
                    fullName:
                      type: string
        friends:
          type: array
          items:
            $ref: '#/components/schemas/Friend'
        mutualFriends:
          type: array
          items:
            $ref: '#/components/schemas/Friend'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        video:
          type: array
          items:
            $ref: '#/components/schemas/Video'
    Friend:
      type: object
      properties:
        id:
          type: integer
        fullName:
          type: string
        photoUrl:
          type: string
        active:
          type: boolean
    Post:
      type: object
      properties:
        id:
          type: integer
        createdAt:
          type: string
        type:
          type: string
          enum:
            - repost
            - post
        mediaFiles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              mediaUrl:
                type: string
        comments:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              createdAt:
                type: string
              text:
                type: string
    Video:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        mediaUrl:
          type: string
    CreatePost:
      type: object
      properties:
        text:
          type: string
        mediaFiles:
          type: array
          items:
            type: object
            properties:
              mediaUrl:
                type: string
    MediaUpload:
      type: object
      properties:
        file:
          type: string
          format: binary
      required:
        - file
    SendMessage:
      type: object
      properties:
        text:
          type: string
          example: Как дела?
        mediaFiles:
          type: array
          items:
            type: object
            properties:
              mediaUrl:
                type: string
    Message:
      type: object
      properties:
        from:
          type: string
          example: Вы
        text:
          type: string
          example: Как дела?
        sentAt:
          type: string
        isRead:
          type: boolean
          example: true
        mediaFiles:
          type: array
          items:
            type: object
            properties:
              mediaUrl:
                type: string

    ShortDialog:
      type: object
      properties:
        id:
          type: integer
          example: 13
        friend:
          $ref: '#/components/schemas/Friend'
        lastMessage:
          $ref: '#/components/schemas/Message'

